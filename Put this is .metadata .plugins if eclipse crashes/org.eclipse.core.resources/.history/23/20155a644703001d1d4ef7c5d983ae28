package com.linkedlist;

public class LinkedList {
	class Node{
		int data;
		Node next;
		public Node(int data) {
			super();
			this.data = data;
			this.next = null;
		}
		
	}
	Node head;
	
	public void insert(int data) {
		Node newNode=new Node(data);
		
		//if list is blank
		if(head==null) {
			head=newNode;
		}
		else {
			Node last=head;
			while(last.next!=null) {
				last=last.next;
			}
			last.next=newNode;
		}
		
	}
	
	public void delete(int data) {
//		Node curr = head;
////		curr != null && 
//		boolean found = false;
//		while(curr != null && curr.next != null && curr.next.data != data) {
//			curr = curr.next;
//			found = true;
//		}
//		if(found) {
//			curr.next = curr.next.next;
//		}
		
		// Store head node
        Node temp = head, prev = null;
 
        // If head node itself holds the key to be deleted
        if (temp != null && temp.data == data) {
            head = temp.next; // Changed head
            return;
        }
 
        // Search for the key to be deleted, keep track of
        // the previous node as we need to change temp.next
        while (temp != null && temp.data != data) {
            prev = temp;
            temp = temp.next;
        }
 
        // If key was not present in linked list
        if (temp == null)
            return;
 
        // Unlink the node from linked list
        prev.next = temp.next;
	}
	
	public void displayList() {
		Node currentNode=head;
		while(currentNode!=null) {
			System.out.print(currentNode.data + " ");
			currentNode=currentNode.next;
		}
	}
}
