package com.linkedlist.doubly;

public class DoublyLinkedList {
	public class Node {
		private int data;
		private Node next, prev;
		
		public Node(int data) {
			this.data = data;
		}
		
		public int getData() {
			return data;
		}
	}
	Node head;
	
	public Node insert(int data) {
		Node newNode = new Node(data);
		
		if(head == null) {
			head = newNode;
		} else {
			Node currentNode = head;
			
			while(currentNode.next != null) {
				currentNode = currentNode.next;
			}
			currentNode.next = newNode;
			newNode.prev = currentNode;
		}
		
		return newNode;
	}
	
	public Node remove(int data) {
		if(head == null) return null;
		
		Node currentNode = head;
		while(currentNode != null && currentNode.data != data) {
			currentNode = currentNode.next;
		}
		
		if(currentNode == null) return null;
		
		if(currentNode.prev == null && currentNode.next == null) {
			head = null;
		} else {
			if(currentNode.prev != null) {
				currentNode.prev.next = currentNode.next;
			} else {
				//currentNode is the head node
				head = currentNode.next;
			}
			if(currentNode.next != null) {
				currentNode.next.prev = currentNode.prev;
			} else {
				//currentNode is the last node
				currentNode = null;
			}
		}
		
		return currentNode;
	}
	
	private void displayLinkedList(Node currentNode) {
		if(currentNode == null) return;
		
		System.out.print(currentNode.data + " ");
		displayLinkedList(currentNode.next);
	}
	
	public void display() {
		displayLinkedList(head);
		System.out.println();
	}
	
	private void displayReverseLinkedList(Node currentNode) {
		if(currentNode == null) return;
		
		displayReverseLinkedList(currentNode.next);
		System.out.print(currentNode.data + " ");
	}
	
	public void displayReverse() {
		displayReverseLinkedList(head);
		System.out.println();
	}
}