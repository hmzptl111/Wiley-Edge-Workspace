package com.linkedlist.circular;


public class CircularLinkedList {
	public class Node {
		private int data;
		private Node next, prev;
		
		public Node(int data) {
			this.data = data;
		}
		
		public int getData() {
			return data;
		}
	}
	Node head, last;
	
	//insertion at the end
	public Node insert(int data) {
		Node newNode = new Node(data);
		if(head == null && last == null) {
			head = newNode;
			last = newNode;
		} else {
			last.next = newNode;
			newNode.prev = last;
			newNode.next = head;
			last = newNode;
			head.prev = last;
		}
		return newNode;
	}
	
	public Node remove(int data) {
		if(head == null && last == null) return null;
		
		Node currentNode = head;
		if(head == last) {
			if(currentNode.data != data) return null;
			
			head = null;
			last = null;
		} else {
			while(currentNode != null && currentNode.next != head) {
				if(currentNode.data != data) {
					currentNode = currentNode.next;					
				} else {
					if(currentNode == head) {
						head = currentNode.next;
						head.prev = last;
						last.next = head;
					} else {
						currentNode.prev.next = currentNode.next;
						currentNode.next.prev = currentNode.prev;
					}
					return currentNode;
				}
			}
			
			if(currentNode == last) {
				if(currentNode.data != data) {
					return null;
				} else {
					last = currentNode.prev;
					last.next = head;
					head.prev = last;
				}
			}
		}
		
		return currentNode;
	}
	
	public void display() {
		Node currentNode = head;
		while(currentNode != null) {
			System.out.print(currentNode.data + " ");
			if(currentNode.next == head) break;
			currentNode = currentNode.next;
		}
		System.out.println();
	}
}
